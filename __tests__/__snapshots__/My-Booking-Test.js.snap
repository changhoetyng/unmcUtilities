// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`BookingStatus Screen Render bookingStatus Page 1`] = `
<RCTSafeAreaView
  emulateUnlessSupported={true}
  style={
    Object {
      "backgroundColor": "#DEE4E8",
      "flex": 1,
    }
  }
>
  <View>
    <Text
      style={
        Array [
          Object {
            "color": "#757575",
            "fontWeight": "bold",
            "marginBottom": 10,
            "marginLeft": 17,
          },
          Object {
            "fontSize": 37.5,
          },
        ]
      }
    >
      Details
    </Text>
    <View
      style={
        Array [
          Object {
            "backgroundColor": "white",
            "padding": 20,
            "width": "100%",
          },
          Object {
            "fontSize": 600,
          },
        ]
      }
    >
      <Text>
        Selected Venue: 
      </Text>
      <Text>
        Time: 
        Invalid date
         
        -
         
        Invalid date
      </Text>
      <Text>
        Date: 
        Invalid date
      </Text>
    </View>
  </View>
  <View
    style={
      Object {
        "bottom": 0,
        "position": "absolute",
        "width": "100%",
      }
    }
  >
    <View
      accessibilityRole="button"
      accessibilityState={
        Object {
          "disabled": true,
        }
      }
      accessible={true}
      focusable={false}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
        }
      }
    >
      <View
        style={
          Array [
            Object {},
            Object {},
          ]
        }
      >
        <Text
          disabled={true}
          style={
            Array [
              Object {
                "color": "#007AFF",
                "fontSize": 18,
                "margin": 8,
                "textAlign": "center",
              },
              Object {
                "color": "#cdcdcd",
              },
            ]
          }
        >
          Not available for check in
        </Text>
      </View>
    </View>
  </View>
</RCTSafeAreaView>
`;

exports[`MyBookingPast Screen Render myBookingPast Page 1`] = `
<RCTSafeAreaView
  emulateUnlessSupported={true}
  style={
    Object {
      "backgroundColor": "#DEE4E8",
      "flex": 1,
    }
  }
>
  <Modal
    animationType="none"
    hardwareAccelerated={false}
    onRequestClose={[Function]}
    style={
      Object {
        "zIndex": 1100,
      }
    }
    transparent={true}
    visible={true}
  >
    <View
      style={
        Object {
          "alignItems": "center",
          "backgroundColor": "#rgba(0, 0, 0, 0.5)",
          "flex": 1,
          "flexDirection": "column",
          "justifyContent": "space-around",
          "zIndex": 1000,
        }
      }
    >
      <View
        style={
          Object {
            "alignItems": "center",
            "backgroundColor": "white",
            "borderRadius": 10,
            "display": "flex",
            "height": 150,
            "justifyContent": "space-around",
            "width": 150,
          }
        }
      >
        <Image
          source={
            Object {
              "testUri": "../../../src/assets/loading.gif",
            }
          }
          style={
            Object {
              "height": "70%",
              "width": "70%",
            }
          }
        />
        <Text
          style={
            Object {
              "fontWeight": "bold",
            }
          }
        >
          Loading
        </Text>
      </View>
    </View>
  </Modal>
  <View
    style={
      Object {
        "alignItems": "center",
        "flex": 1,
        "justifyContent": "center",
        "marginTop": 20,
      }
    }
  >
    <RCTScrollView
      ItemSeparatorComponent={[Function]}
      collapsable={false}
      contentContainerStyle={
        Object {
          "flexGrow": 1,
        }
      }
      data={Array []}
      disableVirtualization={false}
      getItem={[Function]}
      getItemCount={[Function]}
      horizontal={false}
      initialNumToRender={10}
      keyExtractor={[Function]}
      maxToRenderPerBatch={10}
      onContentSizeChange={[Function]}
      onEndReachedThreshold={2}
      onGestureHandlerEvent={[Function]}
      onGestureHandlerStateChange={[Function]}
      onLayout={[Function]}
      onMomentumScrollEnd={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      removeClippedSubviews={false}
      renderItem={[Function]}
      renderScrollComponent={[Function]}
      scrollEventThrottle={50}
      stickyHeaderIndices={Array []}
      style={
        Object {
          "alignSelf": "center",
          "width": "100%",
        }
      }
      updateCellsBatchingPeriod={50}
      viewabilityConfigCallbackPairs={Array []}
      windowSize={21}
    >
      <View />
    </RCTScrollView>
  </View>
</RCTSafeAreaView>
`;

exports[`MyBookingUpcoming Screen Render myBookingUpcoming Page 1`] = `
<RCTSafeAreaView
  emulateUnlessSupported={true}
  style={
    Object {
      "backgroundColor": "#DEE4E8",
      "flex": 1,
    }
  }
>
  <Modal
    animationType="none"
    hardwareAccelerated={false}
    onRequestClose={[Function]}
    style={
      Object {
        "zIndex": 1100,
      }
    }
    transparent={true}
    visible={true}
  >
    <View
      style={
        Object {
          "alignItems": "center",
          "backgroundColor": "#rgba(0, 0, 0, 0.5)",
          "flex": 1,
          "flexDirection": "column",
          "justifyContent": "space-around",
          "zIndex": 1000,
        }
      }
    >
      <View
        style={
          Object {
            "alignItems": "center",
            "backgroundColor": "white",
            "borderRadius": 10,
            "display": "flex",
            "height": 150,
            "justifyContent": "space-around",
            "width": 150,
          }
        }
      >
        <Image
          source={
            Object {
              "testUri": "../../../src/assets/loading.gif",
            }
          }
          style={
            Object {
              "height": "70%",
              "width": "70%",
            }
          }
        />
        <Text
          style={
            Object {
              "fontWeight": "bold",
            }
          }
        >
          Loading
        </Text>
      </View>
    </View>
  </Modal>
  <View
    style={
      Object {
        "alignItems": "center",
        "flex": 1,
        "justifyContent": "center",
        "marginTop": 20,
      }
    }
  >
    <RCTScrollView
      ItemSeparatorComponent={[Function]}
      collapsable={false}
      contentContainerStyle={
        Object {
          "flexGrow": 1,
        }
      }
      data={Array []}
      disableVirtualization={false}
      getItem={[Function]}
      getItemCount={[Function]}
      horizontal={false}
      initialNumToRender={10}
      keyExtractor={[Function]}
      maxToRenderPerBatch={10}
      onContentSizeChange={[Function]}
      onEndReachedThreshold={2}
      onGestureHandlerEvent={[Function]}
      onGestureHandlerStateChange={[Function]}
      onLayout={[Function]}
      onMomentumScrollEnd={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      removeClippedSubviews={false}
      renderItem={[Function]}
      renderScrollComponent={[Function]}
      scrollEventThrottle={50}
      stickyHeaderIndices={Array []}
      style={
        Object {
          "alignSelf": "center",
          "width": "100%",
        }
      }
      updateCellsBatchingPeriod={50}
      viewabilityConfigCallbackPairs={Array []}
      windowSize={21}
    >
      <View />
    </RCTScrollView>
  </View>
</RCTSafeAreaView>
`;
